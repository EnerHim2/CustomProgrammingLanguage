statements      : NEWLINE* statement( NEWLINE+ statement)* NEWLINE*

statement       : KEYOWORD:RETURN expr?
                : KEYWORD:BREAK
                : KEYOWORD:CONTINUE
                : expr

expression      : KEYWORD:VAR IDENTIFIER EQ expr
                : comp-expr ((KEYWORD:AND|KEYWORD:OR)comp-expr)

comp-expr       : NOT comp-expr
                : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr      : term((PLUS|MINUS) term)*

term            : factor((MUL|DIV|MODULO) factor)*

factor          : (PLUS|MINUS) factor

power           : call(POW factor)*

call            : minfac ( LPAREN (expr (COMMA expr)*)? RPAREN)?

minfac          : INT|FLOAT|IDENTIFIER|STRING
                : LPAREN expr 
                : list-expr
                : if-expr
                : for-expr
                : while-expr
                : func-def

list-expr       : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr         : KEYOWORD:IF expr KEYOWORD:THEN
                  (statement if-expr-elif?|if-expr-else?)
                | (NEWLINE statements KEYOWORD:END|if-expr-elif|if-expr-else)

if-expr-elif    : KEYOWORD:ELIF expr KEYOWORD:THEN
                  (statement if-expr-elif?|if-expr-else?)
                | (NEWLINE statements KEYOWORD:END|if-expr-elif|if-expr-else)

if-expr-else    : KEYOWORD:ELSE
                  (statement)
                | (NEWLINE statements KEYOWORD:END)

for-expr        : KEYOWORD:FOR IDENTIFIER EQ expr KEYOWORD:TO expr
                  (KEYWORD:STEP expr)? KEYWORD:THEN 
                  statement
                | (NEWLINE statements KEYOWORD:END)

while-expr      : KEYWORD:WHILE expr KEYWORD:THEN
                  statement
                | (NEWLINE statements KEYOWORD:END)

func-def        : KEYWORD:FUN IDENTIFIER?
                  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                  (ARROW expr)
                | (NEWLINE statements KEYOWORD:END) 